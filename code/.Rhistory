labs(subtitle = "Mixed effect model fitted slopes for outdoor temperature by strategies",
x = "Fitted temperature parameters",
y = "Parameter values",
fill = NULL) +
theme(panel.grid.major.y = element_line(color = "grey80", linewidth = 0.25),
legend.position = "bottom",
axis.text = element_text(size = 12))
ggarrange(p1, p2,
ncol = 1, nrow = 2,
align = "h") +
plot_annotation(title = "Mixed effect model parameter fitting results")
ggsave(filename = "model_mix_lme.png", path = figs_path, units = "in", width = 9, height = 6, dpi = 300)
interc_sd <- as.numeric(var_corr['(Intercept)', "StdDev"])
s1_t_out_sd <- as.numeric(var_corr['t_out:schedule1', "StdDev"])
s2_t_out_sd <- as.numeric(var_corr['t_out:schedule2', "StdDev"])
random_effects <- random_effects %>%
rownames_to_column() %>%
rename(subject = rowname,
Intercept = "(Intercept)",
s1_t_out = "t_out:schedule1",
s2_t_out = "t_out:schedule2")
p1 <- random_effects %>%
mutate(subject = as.factor(subject)) %>%
ggplot(aes(x = Intercept, y = reorder(subject, Intercept))) +
geom_errorbar(aes(xmin = Intercept - interc_sd,
xmax = Intercept + interc_sd),
width = 0,
size = 1) +
geom_point(size = 3,
shape = 21,
color = "black",
fill = "white") +
geom_vline(xintercept = 0,
color = "red",
linewidth = 1,
linetype = "dashed") +
scale_x_continuous(breaks = seq(-60, 60, 20)) +
labs(x = "Intercept",
y = "Unit ID",
subtitle = "Random Intercepts") +
theme(axis.text = element_text(size = 12))
p2 <- random_effects %>%
mutate(subject = as.factor(subject)) %>%
ggplot(aes(x = s1_t_out, y = reorder(subject, s1_t_out))) +
geom_errorbar(aes(xmin = s1_t_out - s1_t_out_sd,
xmax = s1_t_out + s1_t_out_sd),
width = 0,
size = 1) +
geom_point(size = 3,
shape = 21,
color = "black",
fill = "white") +
geom_vline(xintercept = 0,
color = "red",
size = 1,
linetype = "dashed") +
xlim(-25, 25) +
labs(x = "s1_t_out",
y = NULL,
subtitle = "Random slopes for outdoor temperature\nin sampled baseline days") +
theme(axis.text = element_text(size = 12),
axis.text.y = element_blank())
p3 <- random_effects %>%
mutate(subject = as.factor(subject)) %>%
ggplot(aes(x = s2_t_out, y = reorder(subject, s2_t_out))) +
geom_errorbar(aes(xmin = s2_t_out - s2_t_out_sd,
xmax = s2_t_out + s2_t_out_sd),
width = 0,
size = 1) +
geom_point(size = 3,
shape = 21,
color = "black",
fill = "white") +
geom_vline(xintercept = 0,
color = "red",
size = 1,
linetype = "dashed") +
xlim(-25, 25) +
labs(x = "s2_t_out",
y = NULL,
subtitle = "Random slopes for outdoor temperature\nin sampled intervention days") +
theme(axis.text = element_text(size = 12),
axis.text.y = element_blank())
ggarrange(p1, p2, p3,
ncol = 3, nrow = 1,
align = "hv") +
plot_annotation(title = "Random effect parameters fitting results for individual units")
ggsave(filename = "random_effect_para.png", path = figs_path, units = "in", width = 12, height = 8, dpi = 300)
setwd("~/Documents/Mac/ClassMaterial/ARCH299/Genome/cbe_genome_mnv/code")
source("~/Documents/Mac/ClassMaterial/ARCH299/Genome/cbe_genome_mnv/code/1_analysis.R", echo=TRUE)
source("~/Documents/Mac/ClassMaterial/ARCH299/Genome/cbe_genome_mnv/code/graphical.R", echo=TRUE)
#### LIBRARIES ####
require(pacman)
# load packages using pacman
pacman::p_load(tidyverse, lubridate, here, stats, zoo, scales, lvplot, ggpubr, gridExtra, patchwork, RColorBrewer)
# turn off scientific notation
options(scipen = 999, digits = 15)
# set directory
here::i_am("manuscript.rmd")
# set default theme for ggplot
theme_set(theme_minimal())
# define base ggplot theme
theme_update(plot.title = element_text(size = 14, colour = "grey20", face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 10, colour = "grey20", face = "italic", hjust = 0.5, margin = margin(b = 10)),
plot.caption = element_text(size = 10, colour = "grey20", face = "italic", hjust = 0.5),
plot.background = element_rect(fill = "white", colour = NA),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
axis.text = element_text(size = 10),
strip.text = element_text(size = 10, color = "grey20", face = "bold"),
strip.background = element_blank())
# colors
ls_colors <- c("Baseline" = "#c6dbef",
"Measured baseline" = "#c6dbef",
"Adjusted baseline" = "#c6dbef",
"Projected baseline" = "#2171b5",
"Intervention" = "#fdbb84",
"Measured interv" = "#fdbb84",
"Conventional" = "grey70",
"Randomized" = "#99d8c9",
"Randomized\n(24 months)" = "#66c2a4",
"Randomized\n(50/50)" = "#66c2a4",
"Daily\nsampling" = "#66c2a4",
"2-day\nsampling" = "#66c2a4",
"3-day\nsampling" = "#66c2a4",
"7-day\nsampling" = "#66c2a4",
"Dropped" = "#41ae76",
"Kept" = "#006d2c",
"Randomized\n(20/80)" = "#ccece6",
"Buildings finishing randomized M&V" =  "#99d8c9",
"Buildings satisfying 80% TMY range" = "black",
"Buildings satisfying SPRT" = "black")
# parameters
ctr_params <- list(peak_hours = 10:16,
chwl_perc = 0.25,
step_perc = 0.08,
conv_swt = 6,
weather_knots = c(15, 25),
swt_knots = c(12, 7),
coe_peak = 0.8,
coe_off = 1.2,
enable_temp = 8)
#### FUNCTIONS ####
# Function defined to read downloaded tmy files
get_tmy <- function(all_sites, readfile_path){
df_tmy <- data.frame()
for (site in all_sites){
df <- read_csv(paste0(readfile_path, "tmy/", str_glue("{site}.epw")),
skip = 8, col_types = "ddddd-d---------------------------------",
col_names = c("year", "month", "day", "hour", "min", "tmy")) %>%
mutate(year = 2017,
time = ymd_h(paste(paste(year, month, day, sep = "-"), hour, sep = " ")),
temp = tmy) %>%
dplyr::select(time, temp) %>%
mutate(site = site)
df_tmy <- rbind(df_tmy, df)
}
return(df_tmy)
}
# Function defined to add chwst reset intervention
run_reset <- function(df_baseline){
mean <- mean(df_baseline$base_eload, na.rm = T) * ctr_params$chwl_perc
grad <- (ctr_params$swt_knots[2] - ctr_params$swt_knots[1]) /
(ctr_params$weather_knots[2] - ctr_params$weather_knots[1])
interc <- ctr_params$swt_knots[2] - (ctr_params$weather_knots[2] * grad)
df_interv <- df_baseline %>%
mutate(swt = t_out * grad + interc,
chwl = mean,
hour = hour(datetime)) %>%
mutate(swt = ifelse(swt > ctr_params$swt_knots[1], ctr_params$swt_knots[1], ifelse(swt < ctr_params$swt_knots[2], ctr_params$swt_knots[2], swt)),
temp_savings = ifelse(t_out >= ctr_params$enable_temp, (swt - ctr_params$conv_swt) * ctr_params$step_perc, 0),
time_adj = ifelse(hour %in% ctr_params$peak_hours, ctr_params$coe_peak, ctr_params$coe_off),
perc_savings = temp_savings * time_adj,
savings = chwl * perc_savings,
interv_eload = base_eload - savings) %>%
select(datetime, base_eload, interv_eload, t_out)
return(df_interv)
}
# Function defined to interpolate NAs
run_interpo <- function(df_all){
na_counts <- df_all %>%
mutate(date = date(timestamp)) %>%
group_by(date) %>%
summarize(na_hours = sum(is.na(eload)))
# Filter out days with more than half of the hours having NAs
valid_days <- na_counts %>%
filter(na_hours <= 12) %>%
pull(date)
df_filtered <- df_all %>%
filter(date(timestamp) %in% valid_days)
df_filtered <- df_filtered %>%
mutate(across(c(eload, t_out), ~ zoo::na.approx(., na.rm = FALSE))) %>%
rename(datetime = timestamp,
base_eload = eload)
return(df_filtered)
}
# Function defined to adjust the plot scale
get_scale <- function(eload, range = 2){
min_y <- mean(eload, na.rm = T) - range * sd(eload, na.rm = T)
max_y <- mean(eload, na.rm = T) + range * sd(eload, na.rm = T)
return(c(min_y, max_y))
}
#### READ DATA ####
df_loc <- read.csv("../readfiles/loc_map.csv")
# stable dataset
readfile_stable <- str_glue("../readfiles/stable/")
fig_path = "../figs/manuscript/"
df_energy_stable <- read_rds(paste0(readfile_stable, "df_energy.rds"))
df_weather_stable <- read_rds(paste0(readfile_stable, "df_weather.rds"))
df_sprt_all_stable <- read_rds(paste0(readfile_stable, "df_sprt_all.rds"))
df_seq_fs_stable <- read_rds(paste0(readfile_stable, "df_seq_fs.rds"))
df_fs_stable <- read_rds(paste0(readfile_stable, "df_fs.rds"))
df_cont_stable <- read_rds(paste0(readfile_stable, "df_cont.rds"))
df_fs_null_stable <- read_rds(paste0(readfile_stable, "df_fs_null.rds"))
df_seq_fs_null_stable <- read_rds(paste0(readfile_stable, "df_seq_fs_null.rds"))
df_model_acc_stable <- read_rds(paste0(readfile_stable, "df_model_acc.rds"))
df_fs_tmy_stable <- read_rds(paste0(readfile_stable, "df_fs_tmy.rds"))
df_fs_tmy_null_stable <- read_rds(paste0(readfile_stable, "df_fs_tmy_null.rds"))
df_interval_drop_stable <- read_rds(paste0(readfile_stable, "df_interval_drop.rds"))
df_interval_keep_stable <- read_rds(paste0(readfile_stable, "df_interval_keep.rds"))
df_seq_interval_fs_drop_stable <- read_rds(paste0(readfile_stable, "df_seq_interval_fs_drop.rds"))
df_seq_interval_fs_keep_stable <- read_rds(paste0(readfile_stable, "df_seq_interval_fs_keep.rds"))
df_seq_interval_nm_drop_stable <- read_rds(paste0(readfile_stable, "df_seq_interval_nm_drop.rds"))
df_seq_interval_nm_keep_stable <- read_rds(paste0(readfile_stable, "df_seq_interval_nm_keep.rds"))
df_seq_interval_tl_drop_stable <- read_rds(paste0(readfile_stable, "df_seq_interval_tl_drop.rds"))
df_seq_interval_tl_keep_stable <- read_rds(paste0(readfile_stable, "df_seq_interval_tl_keep.rds"))
all_sites_stable <- df_energy_stable %>%
select(site) %>%
distinct() %>%
arrange(site)
all_types_stable <- df_energy_stable %>%
select(type) %>%
mutate(type = as.factor(type)) %>%
distinct()
all_names_stable <- df_energy_stable %>%
select(name) %>%
distinct(name)
# variable dataset
readfile_variable <- str_glue("../readfiles/variable/")
df_energy_variable <- read_rds(paste0(readfile_variable, "df_energy.rds"))
df_weather_variable <- read_rds(paste0(readfile_variable, "df_weather.rds"))
df_sprt_all_variable <- read_rds(paste0(readfile_variable, "df_sprt_all.rds"))
df_seq_fs_variable <- read_rds(paste0(readfile_variable, "df_seq_fs.rds"))
df_fs_variable <- read_rds(paste0(readfile_variable, "df_fs.rds"))
df_cont_variable <- read_rds(paste0(readfile_variable, "df_cont.rds"))
df_fs_null_variable <- read_rds(paste0(readfile_variable, "df_fs_null.rds"))
df_seq_fs_null_variable <- read_rds(paste0(readfile_variable, "df_seq_fs_null.rds"))
df_model_acc_variable <- read_rds(paste0(readfile_variable, "df_model_acc.rds"))
df_fs_tmy_variable <- read_rds(paste0(readfile_variable, "df_fs_tmy.rds"))
df_fs_tmy_null_variable <- read_rds(paste0(readfile_variable, "df_fs_tmy_null.rds"))
df_interval_drop_variable <- read_rds(paste0(readfile_variable, "df_interval_drop.rds"))
df_interval_keep_variable <- read_rds(paste0(readfile_variable, "df_interval_keep.rds"))
df_seq_interval_fs_drop_variable <- read_rds(paste0(readfile_variable, "df_seq_interval_fs_drop.rds"))
df_seq_interval_fs_keep_variable <- read_rds(paste0(readfile_variable, "df_seq_interval_fs_keep.rds"))
df_seq_interval_nm_drop_variable <- read_rds(paste0(readfile_variable, "df_seq_interval_nm_drop.rds"))
df_seq_interval_nm_keep_variable <- read_rds(paste0(readfile_variable, "df_seq_interval_nm_keep.rds"))
df_seq_interval_tl_drop_variable <- read_rds(paste0(readfile_variable, "df_seq_interval_tl_drop.rds"))
df_seq_interval_tl_keep_variable <- read_rds(paste0(readfile_variable, "df_seq_interval_tl_keep.rds"))
all_sites_variable <- df_energy_variable %>%
select(site) %>%
distinct() %>%
arrange(site)
all_types_variable <- df_energy_variable %>%
select(type) %>%
mutate(type = as.factor(type)) %>%
distinct()
all_names_variable <- df_energy_variable %>%
select(name) %>%
distinct(name)
# read functions
function_path <- "../functions/"
source(paste0(function_path, "model_fit.R"))
source(paste0(function_path, "model_pred.R"))
source(paste0(function_path, "prepost_plot.R"))
S_building <- nrow(df_fs_tmy_stable)
V_building <- nrow(df_fs_tmy_variable)
A_building <- S_building + V_building
#### GA ####
rand_eob_S <- df_seq_fs_stable %>%
filter(seq == "eob") %>%
left_join(df_fs_stable %>% filter(scenario == "ref" & method == "true"), by = c("name", "site")) %>%
mutate(diff = abs(savings - fs),
method = "rand_eob") %>%
select(name, method, diff)
conv_S <- df_fs_stable %>%
filter(method != "rand") %>%
pivot_wider(names_from = method, values_from = savings) %>%
mutate(diff = abs(true - conv),
method = "conv") %>%
select(name, method, diff)
rand_final_S <- df_fs_stable %>%
filter(method != "conv") %>%
pivot_wider(names_from = method, values_from = savings) %>%
mutate(diff = abs(true - rand),
method = "rand_final") %>%
select(name, method, diff)
df_MW_S <- rbind(rand_eob_S, conv_S, rand_final_S)
# plot for the variable subset
rand_eob_V <- df_seq_fs_variable %>%
filter(seq == "eob") %>%
left_join(df_fs_variable %>% filter(scenario == "ref" & method == "true"), by = c("name", "site"))%>%
mutate(diff = abs(savings - fs),
method = "rand_eob") %>%
select(name, method, diff)
conv_V <- df_fs_variable %>%
filter(method != "rand") %>%
pivot_wider(names_from = method, values_from = savings) %>%
mutate(diff = abs(true - conv),
method = "conv") %>%
select(name, method, diff)
rand_final_V <- df_fs_variable %>%
filter(method != "conv") %>%
pivot_wider(names_from = method, values_from = savings) %>%
mutate(diff = abs(true - rand),
method = "rand_final") %>%
select(name, method, diff)
df_MW_V <- rbind(rand_eob_V, conv_V, rand_final_V)
# plot for combined dataset
rand_eob_A <- bind_rows(rand_eob_V, rand_eob_S) %>%
select(name, rand_eob_diff = diff)
conv_A <- bind_rows(conv_V, conv_S) %>%
select(name, conv_diff = diff)
rand_final_A <- bind_rows(rand_final_V, rand_final_S) %>%
select(name, rand_final_diff = diff)
df_MW_A <- rand_eob_A %>%
left_join(conv_A, by = "name") %>%
left_join(rand_final_A, by = "name") %>%
pivot_longer(c(rand_eob_diff, conv_diff, rand_final_diff), names_to = "method", values_to = "diff")
p_top <- df_MW_A %>%
mutate(method = as.factor(method),
method = recode_factor(method, "conv_diff" = "Conventional", "rand_eob_diff" = "Randomized", "rand_final_diff" = "Randomized\n(24 months)")) %>%
ggplot(aes(x = method, y = diff, fill = method)) +
geom_jitter(width = 0.2, alpha = 0.8, size = 0.5) +
geom_lv(k = 4, outlier.shape = NA) +
geom_boxplot(outlier.alpha = 0, coef = 0, fill = "#00000000", aes(color = method)) +
geom_hline(yintercept = 0, color = "#fb8072", linewidth = 1.5, lty = "dashed") +
geom_text(data = . %>% group_by(method) %>% summarise(mean = mean(diff)) %>% ungroup(),
aes(x = method, y = mean, label = paste0(round(mean, digits = 1), " %"))) +
scale_y_continuous(expand = c(0, 0),
breaks = breaks_pretty(n = 4),
labels = number_format(suffix = " %")) +
scale_fill_manual(values = ls_colors) +
scale_color_manual(values = c("grey80", "grey80", "grey80")) +
labs(fill = NULL,
color = NULL,
x = NULL,
y = "Absolute error in fractional savings",
subtitle = str_glue("All {A_building} buildings with measured weather")) +
coord_cartesian(ylim = c(0, 23)) +
theme(panel.grid.major.y = element_line(color = "grey80", linewidth = 0.25),
legend.position = "none",
axis.text.x = element_blank(),
plot.margin = margin(t = 2, r = 7, b = 2, l = 2, unit = "mm"))
# TMY
# plot for the stable subset
rand_eob_S <- df_sprt_all_stable %>%
filter(seq == "eob") %>%
select(-c(seq, n_weeks)) %>%
left_join(df_fs_stable %>% filter(scenario == "ref" & method == "true"), by = c("name", "site")) %>%
mutate(diff = abs(savings - annual),
method = "rand_eob") %>%
select(name, method, diff)
conv_S <- df_fs_tmy_stable %>%
left_join(df_fs_stable %>% filter(scenario == "ref" & method == "true"), by = c("name", "site")) %>%
mutate(diff = abs(savings - conv),
method = "conv") %>%
select(name, method, diff)
rand_final_S <- df_fs_tmy_stable %>%
left_join(df_fs_stable %>% filter(scenario == "ref" & method == "true"), by = c("name", "site")) %>%
mutate(diff = abs(savings - rand),
method = "rand_final") %>%
select(name, method, diff)
df_TW_S <- rbind(rand_eob_S, conv_S, rand_final_S)
# plot for the variable subset
rand_eob_V <- df_sprt_all_variable %>%
filter(seq == "eob") %>%
select(-c(seq, n_weeks)) %>%
left_join(df_fs_variable %>% filter(scenario == "ref" & method == "true"), by = c("name", "site")) %>%
mutate(diff = abs(savings - annual),
method = "rand_eob") %>%
select(name, method, diff)
conv_V <- df_fs_tmy_variable %>%
left_join(df_fs_variable %>% filter(scenario == "ref" & method == "true"), by = c("name", "site")) %>%
mutate(diff = abs(savings - conv),
method = "conv") %>%
select(name, method, diff)
rand_final_V <- df_fs_tmy_variable %>%
left_join(df_fs_variable %>% filter(scenario == "ref" & method == "true"), by = c("name", "site")) %>%
mutate(diff = abs(savings - rand),
method = "rand_final") %>%
select(name, method, diff)
df_TW_V <- rbind(rand_eob_V, conv_V, rand_final_V)
# plot for combined dataset
rand_eob_A <- bind_rows(rand_eob_V, rand_eob_S) %>%
select(name, rand_eob_diff = diff)
conv_A <- bind_rows(conv_V, conv_S) %>%
select(name, conv_diff = diff)
rand_final_A <- bind_rows(rand_final_V, rand_final_S) %>%
select(name, rand_final_diff = diff)
df_TW_A <- rand_eob_A %>%
left_join(conv_A, by = "name") %>%
left_join(rand_final_A, by = "name") %>%
pivot_longer(c(rand_eob_diff, conv_diff, rand_final_diff), names_to = "method", values_to = "diff")
p_middle <- df_TW_A %>%
mutate(method = as.factor(method),
method = recode_factor(method, "conv_diff" = "Conventional", "rand_eob_diff" = "Randomized", "rand_final_diff" = "Randomized\n(24 months)")) %>%
ggplot(aes(x = method, y = diff, fill = method)) +
geom_jitter(width = 0.2, alpha = 0.8, size = 0.5) +
geom_lv(k = 4, outlier.shape = NA) +
geom_boxplot(outlier.alpha = 0, coef = 0, fill = "#00000000", aes(color = method)) +
geom_hline(yintercept = 0, color = "#fb8072", linewidth = 1.5, lty = "dashed") +
geom_text(data = . %>% group_by(method) %>% summarise(mean = mean(diff, na.rm = T)) %>% ungroup(),
aes(x = method, y = mean, label = paste0(round(mean, digits = 1), " %"))) +
scale_y_continuous(expand = c(0, 0),
breaks = breaks_pretty(n = 4),
labels = number_format(suffix = " %")) +
scale_fill_manual(values = ls_colors) +
scale_color_manual(values = c("grey80", "grey80", "grey80")) +
labs(fill = NULL,
x = NULL,
y = "Absolute error in fractional savings",
subtitle = str_glue("All {A_building} buildings with TOWT model and TMY weather")) +
coord_cartesian(ylim = c(0, 23)) +
theme(panel.grid.major.y = element_line(color = "grey80", linewidth = 0.25),
legend.position = "none",
plot.margin = margin(t = 2, r = 7, b = 2, l = 2, unit = "mm"))
p_accuracy <- ggarrange(p_top, p_middle,
ncol = 1, nrow = 2,
labels = c("a)", "b)"),
common.legend = T,
legend = "bottom")
# Timeline plot
df_time <- df_sprt_all_variable %>%
filter(seq != "final") %>%
bind_rows(df_sprt_all_stable %>% filter(seq != "final")) %>%
select(name, seq, n_weeks)
count <- list()
n <- 1
for (i in seq(0, 60, by = 3)){
df_sprt <- df_time %>%
filter(seq == "sprt",
n_weeks <= i)
df_eob <- df_time %>%
filter(seq == "eob",
n_weeks <= i)
df_temp <- df_time %>%
filter(seq == "temp",
n_weeks <= i)
count[[n]] <- tibble("n_weeks" = i,
"eob" = nrow(df_eob),
"temp" = nrow(df_temp),
"sprt" = nrow(df_sprt))
n <- n + 1
}
count <- bind_rows(count)
p_timeline <- count %>%
ggplot() +
geom_bar(data = . %>%
filter(n_weeks %in% seq(12, 60, by = 6)),
aes(x = n_weeks, y = eob, fill = "Buildings finishing randomized M&V"),
stat = "identity",
position = "stack",
alpha = 0.8,
width = 3) +
geom_line(aes(x = n_weeks, y = temp, color = "Buildings satisfying 80% TMY range"),
alpha = 0.2) +
geom_point(aes(x = n_weeks, y = temp, color = "Buildings satisfying 80% TMY range"),
size = 1.5) +
geom_line(aes(x = n_weeks, y = sprt, color = "Buildings satisfying SPRT"),
alpha = 0.2) +
geom_point(aes(x = n_weeks, y = sprt, color = "Buildings satisfying SPRT"),
size = 1.5,
shape = 17) +
geom_segment(aes(x = 60.5, y = max(eob), xend = 104.5, yend = max(eob)),
arrow = arrow(length = unit(0.25, "in")),
linewidth = 1.1,
color = "#fb8072") +
annotate(geom = "text",
x = 80,
y = max(count$eob) - 30,
size = 5,
label = "Excess time by conventional M&V") +
geom_vline(xintercept = seq(6, 60, by = 6), lty = "dashed", color = "grey80") +
annotate(geom = "text",
x = 3,
y = 200,
label = paste0("6-week\nblock"),
alpha = 0.5) +
scale_fill_manual(values = ls_colors) +
scale_color_manual(values = ls_colors) +
scale_x_continuous(expand = c(0, 0),
limits = c(0, 105),
breaks = c(12, 24, 36, 48, 60, 104),
labels = c("12 weeks", "24 weeks", "36 weeks", "48 weeks", "60 weeks", "2 years")) +
coord_cartesian(ylim = c(0, 650)) +
labs(x = NULL,
y = "Number of buildings",
fill = NULL,
color = NULL,
subtitle = "timeline comparison") +
theme(panel.grid.major.y = element_line(color = "grey80", linewidth = 0.25),
legend.direction = "horizontal",
legend.position = "bottom",
plot.margin = margin(t = 2, r = 7, b = 2, l = 2, unit = "mm"))
ggarrange(p_accuracy, p_timeline,
ncol = 1, nrow = 2,
heights = c(2.2, 1),
labels = c("", "c)"),
common.legend = F,
legend = "bottom") +
plot_annotation(title = "Overall comparison of conventional and randomized M&V")
View(count)
