all_names_tidy <- df_energy_tidy %>%
select(name) %>%
distinct(name)
# Messy dataset
readfile_messy <- str_glue("../readfiles/messy/")
df_energy_messy <- read_rds(paste0(readfile_messy, "df_energy.rds"))
df_meta_messy <- read_rds(paste0(readfile_messy, "df_meta.rds"))
df_weather_messy <- read_rds(paste0(readfile_messy, "df_weather.rds"))
df_sprt_all_messy <- read_rds(paste0(readfile_messy, "df_sprt_all.rds"))
df_seq_FS_messy <- read_rds(paste0(readfile_messy, "df_seq_FS.rds"))
df_MD_messy <- read_rds(paste0(readfile_messy, "df_MD.rds"))
df_FS_messy <- read_rds(paste0(readfile_messy, "df_FS.rds"))
df_eui_messy <- read_rds(paste0(readfile_messy, "df_eui.rds"))
df_cont_MD_messy <- read_rds(paste0(readfile_messy, "df_cont_MD.rds"))
df_cont_FS_messy <- read_rds(paste0(readfile_messy, "df_cont_FS.rds"))
df_FS_nsprt <- read_rds(paste0(readfile_messy, "df_FS_nsprt.rds"))
df_MD_nsprt <- read_rds(paste0(readfile_messy, "df_MD_nsprt.rds"))
df_seq_FS_nsprt <- read_rds(paste0(readfile_messy, "df_seq_FS_nsprt.rds"))
all_sites_messy <- df_energy_messy %>%
select(site) %>%
distinct() %>%
arrange(site)
all_types_messy <- df_energy_messy %>%
select(type) %>%
mutate(type = as.factor(type)) %>%
distinct()
all_names_messy <- df_energy_messy %>%
select(name) %>%
distinct(name)
# read functions
function_path <- "../functions/"
source(paste0(function_path, "model_fit.R"))
source(paste0(function_path, "model_pred.R"))
source(paste0(function_path, "prepost_plot.R"))
df_sprt_all_messy %>%
filter(seq == "eob" | seq == "temp") %>%
bind_rows(df_sprt_all_tidy %>% filter(seq == "eob" | seq == "temp")) %>%
group_by(site, seq) %>%
summarise(n_weeks = mean(n_weeks)) %>%
ungroup() %>%
mutate(seq = as.factor(seq),
seq = recode_factor(seq, "temp" = "80% temperature range satisfied", "eob" = "remaining weeks till finish")) %>%
ggplot() +
geom_col(aes(x = site, y = n_weeks, fill = seq), position = "identity") +
labs(x = "Site",
y = "Number of weeks",
fill = NULL,
title = "Average finishing time for all buildings using randomized M&V") +
scale_y_continuous(expand = c(0, 0),
breaks = seq(0, 36, by = 12)) +
theme(panel.grid.major.y = element_line(color = "grey80", linewidth = 0.25),
legend.direction = "horizontal",
legend.position = "bottom",
plot.margin = margin(t = 2, r = 7, b = 2, l = 2, unit = "mm"))
p1 <- df_FS_tidy %>%
bind_rows(df_FS_messy) %>%
filter(method == "true") %>%
mutate(method = "true savings") %>%
ggplot(aes(x = method, y = savings, fill = method)) +
stat_boxplot(geom ='errorbar', width = 0.5) +
geom_boxplot(outlier.size = 1) +
scale_y_continuous(expand = c(0, 0),
breaks = breaks_pretty(n = 3),
limits = c(0, 30),
labels = number_format(suffix = "%")) +
labs(x = NULL,
y = NULL,
fill = NULL) +
theme(panel.grid.major.y = element_line(color = "grey80", linewidth = 0.25),
legend.direction = "horizontal",
legend.position = "bottom",
plot.margin = margin(t = 2, r = 7, b = 2, l = 2, unit = "mm"))
p2 <- df_FS_tidy %>%
bind_rows(df_FS_messy) %>%
pivot_wider(names_from = method, values_from = savings) %>%
left_join(df_seq_FS_tidy %>%
bind_rows(df_seq_FS_messy) %>%
filter(seq == "eob"), by = c("name", "site")) %>%
pivot_longer(c(conv, rand, FS), names_to = "parameter", values_to = "value") %>%
mutate(parameter = as.factor(parameter),
parameter = recode_factor(parameter,
"conv" = "Conventional M&V",
"rand" = "Randomized M&V",
"FS" = "Randomized M&V at early stop")) %>%
ggplot(aes(x = parameter, y = value, fill = parameter)) +
stat_boxplot(geom ='errorbar', width = 0.5) +
geom_boxplot(outlier.shape = NA) +
scale_y_continuous(expand = c(0, 0),
breaks = breaks_pretty(n = 3),
limits = c(0, 30)) +
labs(x = NULL,
y = NULL,
fill = NULL) +
theme(panel.grid.major.y = element_line(color = "grey80", linewidth = 0.25),
legend.direction = "horizontal",
legend.position = "bottom",
axis.text.y = element_blank(),
plot.margin = margin(t = 2, r = 7, b = 2, l = 2, unit = "mm"))
ggarrange(p1, p2,
labels = c("a)", "b)"),
ncol = 2, nrow = 1,
widths = c(0.35, 1),
legend = "bottom") +
plot_annotation(title = "Normalized annual fractional savings estimation comparison",
subtitle = "between convention and randomized M&V (with early stop)")
plot_data <- df_seq_FS_tidy %>%
filter(seq == "eob") %>%
left_join(df_FS_tidy %>% filter(scenario == "ref" & method == "true"), by = c("name", "site")) %>%
mutate(abs_diff = abs(savings - FS),
plot_max = max(abs_diff))
median_rand <- median(plot_data$abs_diff)
upper_rand <- quantile(plot_data$abs_diff, probs = 0.95)
p1 <- plot_data %>%
arrange(abs_diff) %>%
ggplot() +
geom_bar(aes(x = seq(1, nrow(all_names_tidy), by = 1), y = abs_diff),
stat = "identity", alpha = 0.5) +
geom_hline(yintercept = median_rand,
linetype = "dashed",
color = "red") +
annotate(y = median_rand + 0.5,
x = 20,
geom = "text",
label = paste0("(", "50% buildings: < ", round(median_rand, digits = 1), " %)"),
size = 4) +
geom_hline(yintercept = upper_rand,
linetype = "dashed",
color = "red") +
annotate(y = upper_rand + 0.5,
x = 20,
geom = "text",
label = paste0("(", "95% buildings: < ", round(upper_rand, digits = 1), " %)"),
size = 4) +
scale_x_continuous(expand = c(0.02, 0),
breaks = breaks_pretty(n = 3)) +
scale_y_continuous(expand = c(0, 0),
breaks = breaks_pretty(n = 3),
labels = number_format(suffix = " %"),
limits = c(0, max(plot_data$plot_max) + 0.5)) +
labs(x = "Number of buildings",
y = "Absolute difference in measured savings",
subtitle = "Randomized M&V at early stop") +
coord_cartesian(ylim = c(0, 10)) +
theme(panel.grid.major.y = element_line(color = "grey80", linewidth = 0.25),
legend.direction = "horizontal",
legend.position = "bottom",
plot.margin = margin(t = 2, r = 7, b = 2, l = 2, unit = "mm"))
plot_data <- df_FS_tidy %>%
filter(method != "rand") %>%
group_by(name) %>%
summarise(abs_diff = abs(diff(savings))) %>%
ungroup() %>%
mutate(plot_max = max(abs_diff))
median_conv <- median(plot_data$abs_diff)
upper_conv <- quantile(plot_data$abs_diff, probs = 0.95)
p2 <- plot_data %>%
arrange(abs_diff) %>%
ggplot() +
geom_bar(aes(x = seq(1, nrow(all_names_tidy), by = 1), y = abs_diff),
stat = "identity", alpha = 0.5) +
geom_hline(yintercept = median_conv,
linetype = "dashed",
color = "red") +
annotate(y = median_conv + 0.5,
x = 20,
geom = "text",
label = paste0("(", "50% buildings: < ", round(median_conv, digits = 1), " %)"),
size = 4) +
geom_hline(yintercept = upper_conv,
linetype = "dashed",
color = "red") +
annotate(y = upper_conv + 0.5,
x = 20,
geom = "text",
label = paste0("(", "95% buildings: < ", round(upper_conv, digits = 1), " %)"),
size = 4) +
scale_x_continuous(expand = c(0.02, 0),
breaks = breaks_pretty(n = 3)) +
scale_y_continuous(expand = c(0, 0),
breaks = breaks_pretty(n = 3),
labels = number_format(suffix = " %"),
limits = c(0, max(plot_data$plot_max) + 0.1)) +
labs(x = "Number of buildings",
y = NULL,
subtitle = "Conventional M&V") +
coord_cartesian(ylim = c(0, 10)) +
theme(panel.grid.major.y = element_line(color = "grey80", linewidth = 0.25),
legend.direction = "horizontal",
legend.position = "bottom",
axis.text.y = element_blank(),
plot.margin = margin(t = 2, r = 7, b = 2, l = 0, unit = "mm"))
ggarrange(p1, p2,
ncol=2, nrow=1,
labels = c("a)", "b)"),
align = "hv",
legend="bottom") +
plot_annotation(title = str_glue("M&V method accuracy comparison"),
subtitle = "fractional savings in tidy subset")
plot_data <- df_seq_FS_messy %>%
filter(seq == "eob") %>%
left_join(df_FS_messy %>% filter(scenario == "ref" & method == "true"), by = c("name", "site")) %>%
mutate(abs_diff = abs(savings - FS),
plot_max = max(abs_diff))
median_rand <- median(plot_data$abs_diff)
upper_rand <- quantile(plot_data$abs_diff, probs = 0.95)
p1 <- plot_data %>%
arrange(abs_diff) %>%
ggplot() +
geom_bar(aes(x = seq(1, nrow(all_names_messy), by = 1), y = abs_diff),
stat = "identity", alpha = 0.5) +
geom_hline(yintercept = median_rand,
linetype = "dashed",
color = "red") +
annotate(y = median_rand + 1,
x = 220,
geom = "text",
label = paste0("(", "50% buildings: < ", round(median_rand, digits = 1), " %)"),
size = 4) +
geom_hline(yintercept = upper_rand,
linetype = "dashed",
color = "red") +
annotate(y = upper_rand + 1,
x = 220,
geom = "text",
label = paste0("(", "95% buildings: < ", round(upper_rand, digits = 1), " %)"),
size = 4) +
scale_x_continuous(expand = c(0.02, 0),
breaks = breaks_pretty(n = 3)) +
scale_y_continuous(expand = c(0, 0),
breaks = breaks_pretty(n = 3),
labels = number_format(suffix = " %"),
limits = c(0, max(plot_data$plot_max) + 0.5)) +
labs(x = "Number of buildings",
y = "Absolute difference in measured savings",
subtitle = "Randomized M&V at early stop") +
coord_cartesian(ylim = c(0, 25)) +
theme(panel.grid.major.y = element_line(color = "grey80", linewidth = 0.25),
legend.direction = "horizontal",
legend.position = "bottom",
plot.margin = margin(t = 2, r = 7, b = 2, l = 2, unit = "mm"))
plot_data <- df_FS_messy %>%
filter(method != "rand") %>%
group_by(name) %>%
summarise(abs_diff = abs(diff(savings))) %>%
ungroup() %>%
mutate(plot_max = max(abs_diff))
median_conv <- median(plot_data$abs_diff)
upper_conv <- quantile(plot_data$abs_diff, probs = 0.95)
p2 <- plot_data %>%
arrange(abs_diff) %>%
ggplot() +
geom_bar(aes(x = seq(1, nrow(all_names_messy), by = 1), y = abs_diff),
stat = "identity", alpha = 0.5) +
geom_hline(yintercept = median_conv,
linetype = "dashed",
color = "red") +
annotate(y = median_conv + 1,
x = 220,
geom = "text",
label = paste0("(", "50% buildings: < ", round(median_conv, digits = 1), " %)"),
size = 4) +
geom_hline(yintercept = upper_conv,
linetype = "dashed",
color = "red") +
annotate(y = upper_conv + 1,
x = 220,
geom = "text",
label = paste0("(", "95% buildings: < ", round(upper_conv, digits = 1), " %)"),
size = 4) +
scale_x_continuous(expand = c(0.02, 0),
breaks = breaks_pretty(n = 3)) +
scale_y_continuous(expand = c(0, 0),
breaks = breaks_pretty(n = 3),
labels = number_format(suffix = " %"),
limits = c(0, max(plot_data$plot_max) + 0.1)) +
labs(x = "Number of buildings",
y = NULL,
subtitle = "Conventional M&V") +
coord_cartesian(ylim = c(0, 25)) +
theme(panel.grid.major.y = element_line(color = "grey80", linewidth = 0.25),
legend.direction = "horizontal",
legend.position = "bottom",
axis.text.y = element_blank(),
plot.margin = margin(t = 2, r = 7, b = 2, l = 0, unit = "mm"))
ggarrange(p1, p2,
ncol=2, nrow=1,
labels = c("a)", "b)"),
align = "hv",
legend="bottom") +
plot_annotation(title = str_glue("M&V method accuracy comparison"),
subtitle = "fractional savings in messy subset")
n = 6
site_info <- df_energy_tidy %>%
filter(name == all_names_tidy$name[n]) %>%
select(site, type) %>%
distinct()
site <- site_info$site
site_weather <- df_weather_tidy %>%
filter(site == site_info$site) %>%
select(timestamp, t_out) %>%
group_by(timestamp) %>%
summarise(t_out = mean(t_out)) %>%
ungroup()
df_all <- df_energy_tidy %>%
filter(name == all_names_tidy$name[n]) %>%
select(timestamp, eload) %>%
left_join(site_weather, by = "timestamp")
# Linear interpolation of baseline
df_all <- df_all %>%
run_interpo()
plot_scale <- get_scale(df_all$base_eload)
df_hourly_conv <- df_all %>%
run_reset()
df_base_conv <- df_hourly_conv %>%
select(datetime,
eload = base_eload,
t_out) %>%
drop_na()
df_interv_conv <- df_hourly_conv %>%
select(datetime,
eload = interv_eload,
t_out) %>%
drop_na()
change_start <- occ_params$change_start
change_end <- occ_params$change_end
change <- occ_params$change
base_pre_meas <- df_base_conv %>%
filter(datetime < as.Date("2017-01-01")) %>%
mutate(eload = ifelse(month(datetime) >= month(change_start) & month(datetime) <= month(change_end), eload * (1 - change / 100), eload))
# Baseline projection
towt_base <- base_pre_meas %>%
model_fit()
df_towt <- df_interv_conv %>%
filter(datetime >= as.Date("2017-01-01")) %>%
select(time = datetime,
temp = t_out,
eload)
base_pos_proj <- model_pred(df_towt, towt_base) %>%
rename("datetime" = "time") %>%
select(datetime, towt, eload)
base_pos_true <- df_base_conv %>%
filter(datetime >= as.Date("2017-01-01"))
interv_pos_meas <- df_interv_conv %>%
filter(datetime >= as.Date("2017-01-01"))
p1 <- ggplot() +
geom_point(data = base_pre_meas %>%
slice_sample(n = 500),
aes(x = datetime, y = eload, color = "Measured baseline"),
size = 0.5,
alpha = 0.3) +
geom_smooth(data = base_pre_meas,
aes(x = datetime, y = eload, color = "Measured baseline"),
formula = y ~ x, method = "loess") +
scale_x_datetime(date_breaks = "2 months",
date_labels = "%b")  +
scale_y_continuous(expand = c(0, 0),
breaks = breaks_pretty(n = 3),
labels = number_format(suffix = " kW")) +
scale_color_manual(values = ls_colors) +
coord_cartesian(ylim = plot_scale) +
labs(x = NULL,
y = NULL,
color = NULL,
title = NULL,
subtitle = "Pre-retrofit period") +
theme(panel.grid.major.y = element_line(color = "grey80", linewidth = 0.25),
legend.direction = "horizontal",
legend.position = "bottom",
plot.margin = margin(t = 2, r = 7, b = 2, l = 2, unit = "mm"))
p2 <- ggplot() +
geom_point(data = base_pos_proj %>%
slice_sample(n = 500),
aes(x = datetime, y = towt, color = "Projected baseline\n(no change)"),
size = 0.5,
alpha = 0.3) +
geom_smooth(data = base_pos_proj,
aes(x = datetime, y = towt, color = "Projected baseline\n(no change)"),
formula = y ~ x, method = "loess") +
geom_point(data = base_pos_true %>%
slice_sample(n = 500),
aes(x = datetime, y = eload, color = "Adjusted baseline"),
size = 0.5,
alpha = 0.3) +
geom_smooth(data = base_pos_true,
aes(x = datetime, y = eload, color = "Adjusted baseline"),
formula = y ~ x, method = "loess") +
geom_point(data = interv_pos_meas %>%
slice_sample(n = 500),
aes(x = datetime, y = eload, color = "Measured interv"),
size = 0.5,
alpha = 0.3) +
geom_smooth(data = interv_pos_meas,
aes(x = datetime, y = eload, color = "Measured interv"),
formula = y ~ x, method = "loess") +
scale_x_datetime(date_breaks = "2 months",
date_labels = "%b")  +
scale_y_continuous(expand = c(0, 0),
breaks = breaks_pretty(n = 3),
labels = number_format(suffix = " kW")) +
scale_color_manual(values = ls_colors) +
coord_cartesian(ylim = plot_scale) +
labs(x = NULL,
y = NULL,
color = NULL,
title = NULL,
subtitle = "post-retrofit period") +
theme(panel.grid.major.y = element_line(color = "grey80", linewidth = 0.25),
axis.text.y = element_blank(),
legend.direction = "horizontal",
legend.position = "bottom",
plot.margin = margin(t = 2, r = 7, b = 2, l = 2, unit = "mm"))
ggarrange(p1, p2,
ncol=2, nrow=1,
labels = c("a)", "b)"),
widths = c(1, 1),
align = "v",
legend="bottom") +
plot_annotation(title = "Building energy consumption with added occupancy change")
df_NRE_occ
View(df_NRE_occ)
scenario <- S4
scenario <- 'S4'
dev_conv <- df_NRE_occ %>%
filter(scenario == s) %>%
filter(method != "rand") %>%
group_by(name, site, scenario) %>%
summarise(conv = abs(diff(savings))) %>%
ungroup()
s <- 'S4'
dev_conv <- df_NRE_occ %>%
filter(scenario == s) %>%
filter(method != "rand") %>%
group_by(name, site, scenario) %>%
summarise(conv = abs(diff(savings))) %>%
ungroup()
dev_rand <- df_NRE_occ %>%
filter(scenario == s) %>%
filter(method != "conv") %>%
group_by(name, site, scenario) %>%
summarise(rand = abs(diff(savings))) %>%
ungroup()
dev_FS <- dev_rand %>%
left_join(dev_conv, by = c("name", "site", "scenario")) %>%
mutate(diff_in_diff = conv - rand)
mean_diff <- dev_FS %>%
group_by(site) %>%
summarise(mean = round(mean(diff_in_diff), digits = 1),
pos = round(n() / 2) + 1,
.groups = 'keep')
dev_FS %>%
ggplot(aes(group = site)) +
geom_col(aes(x = name, y = diff_in_diff), position = "identity", alpha = 0.3) +
facet_wrap(~site, nrow = 1, scales = "free_x") +
scale_y_continuous(expand = c(0.1, 0),
breaks = breaks_pretty(n = 4),
labels = number_format(suffix = "%")) +
geom_text(data = mean_diff,
aes(x = pos, y = -.5, group = site, label = paste0(mean, "%"))) +
geom_line(aes(x = name, y = rand, color = "Absolute deviation of randomized method"), alpha = 0.5) +
geom_point(aes(x = name, y = rand, color = "Absolute deviation of randomized method"), alpha = 0.5) +
labs(x = NULL,
fill = NULL,
y = NULL,
color = NULL,
title = "Difference-in-difference of fractional savings calculated for each building") +
theme(panel.grid.major.y = element_line(color = "grey80", linewidth = 0.25),
axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
legend.direction = "horizontal",
legend.position = "bottom",
plot.margin = margin(t = 2, r = 7, b = 2, l = 2, unit = "mm"))
s <- 'S4'
dev_conv <- df_NRE_occ %>%
filter(scenario == s) %>%
filter(method != "rand") %>%
group_by(name, site, scenario) %>%
summarise(conv = abs(diff(savings))) %>%
ungroup()
dev_rand <- df_NRE_occ %>%
filter(scenario == s) %>%
filter(method != "conv") %>%
group_by(name, site, scenario) %>%
summarise(rand = abs(diff(savings))) %>%
ungroup()
dev_FS <- dev_rand %>%
left_join(dev_conv, by = c("name", "site", "scenario")) %>%
mutate(diff_in_diff = conv - rand)
mean_diff <- dev_FS %>%
group_by(site) %>%
summarise(mean = round(mean(diff_in_diff), digits = 1),
pos = round(n() / 2) + 1,
.groups = 'keep')
dev_FS %>%
ggplot(aes(group = site)) +
geom_col(aes(x = name, y = diff_in_diff), position = "identity", alpha = 0.3) +
facet_wrap(~site, nrow = 1, scales = "free_x") +
scale_y_continuous(expand = c(0.1, 0),
breaks = breaks_pretty(n = 4),
labels = number_format(suffix = "%")) +
geom_text(data = mean_diff,
aes(x = pos, y = -.5, group = site, label = paste0(mean, "%"))) +
geom_line(aes(x = name, y = rand, color = "Absolute deviation of randomized method"), alpha = 0.5) +
geom_point(aes(x = name, y = rand, color = "Absolute deviation of randomized method"), alpha = 0.5) +
labs(x = NULL,
fill = NULL,
y = NULL,
color = NULL,
title = "Difference-in-difference of fractional savings calculated for each building") +
theme(panel.grid.major.y = element_line(color = "grey80", linewidth = 0.25),
axis.text.x = element_blank(),
legend.direction = "horizontal",
legend.position = "bottom",
plot.margin = margin(t = 2, r = 7, b = 2, l = 2, unit = "mm"))
