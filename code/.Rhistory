geom_hline(yintercept = 0, linetype = "dashed", color = "red", linewidth = 1.2) +
annotate(geom = "text",
x = 0.8,
y = 0.5,
label = "True savings") +
scale_y_continuous(expand = c(0, 0),
breaks = breaks_pretty(n = 5),
limits = c(0, 16),
labels = number_format(suffix = "%")) +
labs(x = NULL,
y = NULL,
fill = NULL,
title = "Savings estimation comparison",
subtitle = "between convention and randomized M&V (with early stop)") +
theme(panel.grid.major.y = element_line(color = "grey80", linewidth = 0.25),
legend.direction = "horizontal",
legend.position = "bottom",
plot.margin = margin(t = 2, r = 7, b = 2, l = 2, unit = "mm"))
# General accuracy checking on 0 saving effect for both method
df_FS_nsprt %>%
pivot_wider(names_from = method, values_from = savings) %>%
left_join(df_seq_FS_nsprt %>% filter(seq == "eob"), by = c("name", "site")) %>%
pivot_longer(c(true, conv, rand, FS), names_to = "parameter", values_to = "value") %>%
filter(parameter != "true") %>%
mutate(parameter = as.factor(parameter),
parameter = recode_factor(parameter,
"conv" = "Conventional M&V",
"rand" = "Randomized M&V",
"FS" = "Randomized M&V at early stop")) %>%
ggplot(aes(x = parameter, y = value, fill = parameter)) +
stat_boxplot(geom ='errorbar', width = 0.5) +
geom_boxplot(outlier.shape = NA) +
geom_hline(yintercept = 0, linetype = "dashed", color = "red", linewidth = 1.2) +
annotate(geom = "text",
x = 0.75,
y = 0.5,
label = "True savings") +
scale_y_continuous(expand = c(0, 0),
breaks = breaks_pretty(n = 5),
limits = c(0, 16),
labels = number_format(suffix = "%")) +
labs(x = NULL,
y = NULL,
fill = NULL,
title = "Savings estimation comparison",
subtitle = "between convention and randomized M&V (with early stop)") +
theme(panel.grid.major.y = element_line(color = "grey80", linewidth = 0.25),
legend.direction = "horizontal",
legend.position = "bottom",
plot.margin = margin(t = 2, r = 7, b = 2, l = 2, unit = "mm"))
# General accuracy checking on 0 saving effect for both method
df_FS_nsprt %>%
pivot_wider(names_from = method, values_from = savings) %>%
left_join(df_seq_FS_nsprt %>% filter(seq == "eob"), by = c("name", "site")) %>%
pivot_longer(c(true, conv, rand, FS), names_to = "parameter", values_to = "value") %>%
filter(parameter != "true") %>%
mutate(parameter = as.factor(parameter),
parameter = recode_factor(parameter,
"conv" = "Conventional M&V",
"rand" = "Randomized M&V",
"FS" = "Randomized M&V at early stop")) %>%
ggplot(aes(x = parameter, y = value, fill = parameter)) +
stat_boxplot(geom ='errorbar', width = 0.5) +
geom_boxplot(outlier.shape = NA) +
geom_hline(yintercept = 0, linetype = "dashed", color = "red", linewidth = 1.2) +
annotate(geom = "text",
x = 0.6,
y = 0.5,
label = "True savings") +
scale_y_continuous(expand = c(0, 0),
breaks = breaks_pretty(n = 5),
limits = c(0, 16),
labels = number_format(suffix = "%")) +
labs(x = NULL,
y = NULL,
fill = NULL,
title = "Savings estimation comparison",
subtitle = "between convention and randomized M&V (with early stop)") +
theme(panel.grid.major.y = element_line(color = "grey80", linewidth = 0.25),
legend.direction = "horizontal",
legend.position = "bottom",
plot.margin = margin(t = 2, r = 7, b = 2, l = 2, unit = "mm"))
# General accuracy checking on 0 saving effect for both method
df_FS_nsprt %>%
pivot_wider(names_from = method, values_from = savings) %>%
left_join(df_seq_FS_nsprt %>% filter(seq == "eob"), by = c("name", "site")) %>%
pivot_longer(c(true, conv, rand, FS), names_to = "parameter", values_to = "value") %>%
filter(parameter != "true") %>%
mutate(parameter = as.factor(parameter),
parameter = recode_factor(parameter,
"conv" = "Conventional M&V",
"rand" = "Randomized M&V",
"FS" = "Randomized M&V at early stop")) %>%
ggplot(aes(x = parameter, y = value, fill = parameter)) +
stat_boxplot(geom ='errorbar', width = 0.5) +
geom_boxplot(outlier.shape = NA) +
geom_hline(yintercept = 0, linetype = "dashed", color = "red", linewidth = 1.2) +
annotate(geom = "text",
x = 0.6,
y = 0.5,
color = 'red',
label = "True savings") +
scale_y_continuous(expand = c(0, 0),
breaks = breaks_pretty(n = 5),
limits = c(0, 16),
labels = number_format(suffix = "%")) +
labs(x = NULL,
y = NULL,
fill = NULL,
title = "Savings estimation comparison",
subtitle = "between convention and randomized M&V (with early stop)") +
theme(panel.grid.major.y = element_line(color = "grey80", linewidth = 0.25),
legend.direction = "horizontal",
legend.position = "bottom",
plot.margin = margin(t = 2, r = 7, b = 2, l = 2, unit = "mm"))
# General accuracy checking on 0 saving effect for both method
df_FS_nsprt %>%
pivot_wider(names_from = method, values_from = savings) %>%
left_join(df_seq_FS_nsprt %>% filter(seq == "eob"), by = c("name", "site")) %>%
pivot_longer(c(true, conv, rand, FS), names_to = "parameter", values_to = "value") %>%
filter(parameter != "true") %>%
mutate(parameter = as.factor(parameter),
parameter = recode_factor(parameter,
"conv" = "Conventional M&V",
"rand" = "Randomized M&V",
"FS" = "Randomized M&V at early stop")) %>%
ggplot(aes(x = parameter, y = value, fill = parameter)) +
stat_boxplot(geom ='errorbar', width = 0.5) +
geom_boxplot(outlier.shape = NA) +
geom_hline(yintercept = 0, linetype = "dashed", color = "red", linewidth = 1.2) +
annotate(geom = "text",
x = 0.6,
y = 0.5,
color = 'red',
label = "True savings = 0") +
scale_y_continuous(expand = c(0, 0),
breaks = breaks_pretty(n = 5),
limits = c(0, 16),
labels = number_format(suffix = "%")) +
labs(x = NULL,
y = NULL,
fill = NULL,
title = "Savings estimation comparison",
subtitle = "between convention and randomized M&V (with early stop)") +
theme(panel.grid.major.y = element_line(color = "grey80", linewidth = 0.25),
legend.direction = "horizontal",
legend.position = "bottom",
plot.margin = margin(t = 2, r = 7, b = 2, l = 2, unit = "mm"))
ggsave(filename = str_glue("FS_Dev_nsprt.png"), path = combifigs_path, units = "in", height = 5, width = 8, dpi = 300)
ggsave(filename = str_glue("FS_Dev_nsprt.png"), path = combifigs_path, units = "in", height = 5, width = 6, dpi = 300)
# General accuracy checking on 0 saving effect for both method
df_FS_nsprt %>%
pivot_wider(names_from = method, values_from = savings) %>%
left_join(df_seq_FS_nsprt %>% filter(seq == "eob"), by = c("name", "site")) %>%
pivot_longer(c(true, conv, rand, FS), names_to = "parameter", values_to = "value") %>%
filter(parameter != "true") %>%
mutate(parameter = as.factor(parameter),
parameter = recode_factor(parameter,
"conv" = "Conventional M&V",
"rand" = "Randomized M&V",
"FS" = "Randomized M&V at early stop")) %>%
ggplot(aes(x = parameter, y = value, fill = parameter)) +
stat_boxplot(geom ='errorbar', width = 0.2) +
geom_boxplot(outlier.shape = NA, width = 0.5) +
geom_hline(yintercept = 0, linetype = "dashed", color = "red", linewidth = 1.2) +
annotate(geom = "text",
x = 0.6,
y = 0.5,
color = 'red',
label = "True savings = 0") +
scale_y_continuous(expand = c(0, 0),
breaks = breaks_pretty(n = 5),
limits = c(0, 16),
labels = number_format(suffix = "%")) +
labs(x = NULL,
y = NULL,
fill = NULL,
title = "Savings estimation comparison",
subtitle = "between convention and randomized M&V (with early stop)") +
theme(panel.grid.major.y = element_line(color = "grey80", linewidth = 0.25),
legend.direction = "horizontal",
legend.position = "bottom",
plot.margin = margin(t = 2, r = 7, b = 2, l = 2, unit = "mm"))
ggsave(filename = str_glue("FS_Dev_nsprt.png"), path = combifigs_path, units = "in", height = 5, width = 6, dpi = 300)
# General accuracy checking on 0 saving effect for both method
df_FS_nsprt %>%
pivot_wider(names_from = method, values_from = savings) %>%
left_join(df_seq_FS_nsprt %>% filter(seq == "eob"), by = c("name", "site")) %>%
pivot_longer(c(true, conv, rand, FS), names_to = "parameter", values_to = "value") %>%
filter(parameter != "true") %>%
mutate(parameter = as.factor(parameter),
parameter = recode_factor(parameter,
"conv" = "Conventional M&V",
"rand" = "Randomized M&V",
"FS" = "Randomized M&V at early stop")) %>%
ggplot(aes(x = parameter, y = value, fill = parameter)) +
stat_boxplot(geom ='errorbar', width = 0.2) +
geom_boxplot(outlier.shape = NA, width = 0.5) +
geom_hline(yintercept = 0, linetype = "dashed", color = "red", linewidth = 1.2) +
annotate(geom = "text",
x = 0.75,
y = 0.5,
color = 'red',
label = "True savings = 0") +
scale_y_continuous(expand = c(0, 0),
breaks = breaks_pretty(n = 5),
limits = c(0, 16),
labels = number_format(suffix = "%")) +
labs(x = NULL,
y = NULL,
fill = NULL,
title = "Savings estimation comparison",
subtitle = "between convention and randomized M&V (with early stop)") +
theme(panel.grid.major.y = element_line(color = "grey80", linewidth = 0.25),
legend.direction = "horizontal",
legend.position = "bottom",
plot.margin = margin(t = 2, r = 7, b = 2, l = 2, unit = "mm"))
ggsave(filename = str_glue("FS_Dev_nsprt.png"), path = combifigs_path, units = "in", height = 5, width = 6, dpi = 300)
# General accuracy checking for both method
df_FS %>%
pivot_wider(names_from = method, values_from = savings) %>%
left_join(df_seq_FS %>% filter(seq == "eob"), by = c("name", "site")) %>%
pivot_longer(c(true, conv, rand, FS), names_to = "parameter", values_to = "value") %>%
mutate(parameter = as.factor(parameter),
parameter = recode_factor(parameter,
"true" = "True savings",
"conv" = "Conventional M&V",
"rand" = "Randomized M&V",
"FS" = "Randomized M&V at early stop")) %>%
ggplot(aes(x = parameter, y = value, fill = parameter)) +
stat_boxplot(geom ='errorbar', width = 0.5) +
geom_boxplot(outlier.shape = NA) +
scale_y_continuous(expand = c(0, 0),
breaks = breaks_pretty(n = 5),
limits = c(0, 16),
labels = number_format(suffix = "%")) +
labs(x = NULL,
y = NULL,
fill = NULL,
title = "Savings estimation comparison",
subtitle = "between convention and randomized M&V (with early stop)") +
theme(panel.grid.major.y = element_line(color = "grey80", linewidth = 0.25),
legend.direction = "horizontal",
legend.position = "bottom",
plot.margin = margin(t = 2, r = 7, b = 2, l = 2, unit = "mm"))
# General accuracy checking for both method
df_FS %>%
pivot_wider(names_from = method, values_from = savings) %>%
left_join(df_seq_FS %>% filter(seq == "eob"), by = c("name", "site")) %>%
pivot_longer(c(true, conv, rand, FS), names_to = "parameter", values_to = "value") %>%
mutate(parameter = as.factor(parameter),
parameter = recode_factor(parameter,
"true" = "True savings",
"conv" = "Conventional M&V",
"rand" = "Randomized M&V",
"FS" = "Randomized M&V at early stop")) %>%
ggplot(aes(x = parameter, y = value, fill = parameter)) +
stat_boxplot(geom ='errorbar', width = 0.2) +
geom_boxplot(outlier.shape = NA, width = 0.5) +
scale_y_continuous(expand = c(0, 0),
breaks = breaks_pretty(n = 5),
limits = c(0, 16),
labels = number_format(suffix = "%")) +
labs(x = NULL,
y = NULL,
fill = NULL,
title = "Savings estimation comparison",
subtitle = "between convention and randomized M&V (with early stop)") +
theme(panel.grid.major.y = element_line(color = "grey80", linewidth = 0.25),
legend.direction = "horizontal",
legend.position = "bottom",
plot.margin = margin(t = 2, r = 7, b = 2, l = 2, unit = "mm"))
ggsave(filename = str_glue("FS_Dev.png"), path = combifigs_path, units = "in", height = 5, width = 6, dpi = 300)
ggsave(filename = str_glue("FS_Dev.png"), path = combifigs_path, units = "in", height = 5, width = 7, dpi = 300)
# General accuracy checking on 0 saving effect for both method
df_FS_nsprt %>%
pivot_wider(names_from = method, values_from = savings) %>%
left_join(df_seq_FS_nsprt %>% filter(seq == "eob"), by = c("name", "site")) %>%
pivot_longer(c(true, conv, rand, FS), names_to = "parameter", values_to = "value") %>%
filter(parameter != "true") %>%
mutate(parameter = as.factor(parameter),
parameter = recode_factor(parameter,
"conv" = "Conventional M&V",
"rand" = "Randomized M&V",
"FS" = "Randomized M&V at early stop")) %>%
ggplot(aes(x = parameter, y = value, fill = parameter)) +
stat_boxplot(geom ='errorbar', width = 0.2) +
geom_boxplot(outlier.shape = NA, width = 0.5) +
geom_hline(yintercept = 0, linetype = "dashed", color = "red", linewidth = 1.2) +
annotate(geom = "text",
x = 0.75,
y = 0.5,
color = 'red',
label = "True savings = 0") +
scale_y_continuous(expand = c(0, 0),
breaks = breaks_pretty(n = 5),
limits = c(0, 16),
labels = number_format(suffix = "%")) +
labs(x = NULL,
y = NULL,
fill = NULL,
title = "Savings estimation comparison",
subtitle = "between convention and randomized M&V (with early stop)") +
theme(panel.grid.major.y = element_line(color = "grey80", linewidth = 0.25),
legend.direction = "horizontal",
legend.position = "bottom",
plot.margin = margin(t = 2, r = 7, b = 2, l = 2, unit = "mm"))
ggsave(filename = str_glue("FS_Dev_nsprt.png"), path = combifigs_path, units = "in", height = 5, width = 7, dpi = 300)
ggsave(filename = str_glue("FS_Dev_nsprt.png"), path = combifigs_path, units = "in", height = 5, width = 6, dpi = 300)
# use pacman
require(pacman)
# load libraries
pacman::p_load(tidyverse, lubridate, scales, slider, cowplot, patchwork, RColorBrewer, # general
broom, ggpmisc, ggpubr, # linear models
RMV2.0, # TOWT model
sprtt, effsize) # sequential testing
# turn off scientific notation
options(scipen = 999)
# set default theme for ggplot
theme_set(theme_minimal())
# define base ggplot theme
theme_update(plot.title = element_text(size = 14, colour = "grey20", face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 10, colour = "grey20", face = "italic", hjust = 0.5, margin = margin(b = 10)),
plot.caption = element_text(size = 8, colour = "grey20", face = "italic", hjust = 0.5),
plot.background = element_rect(fill = "white", colour = NA),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
strip.text = element_text(size = 10, color = "grey20", face = "bold"),
strip.background = element_blank())
# T test
perform_t_test <- function(df_pre, df_post, building) {
t.test(df_pre[[building]], df_post[[building]], alternative = "two.sided")
}
#### READ DATA ####
data_path <- "../../buds-lab-building-data-genome-project-2/data/meters/cleaned/"
meta_path <- "../../buds-lab-building-data-genome-project-2/data/metadata/"
weather_path <- "../../buds-lab-building-data-genome-project-2/data/weather/"
output_path <- "../readfiles/messy/"
df_elec <- read_csv(paste0(data_path, "electricity_cleaned.csv"))
df_meta <- read_csv(paste0(meta_path, "metadata.csv"))
setwd("~/Documents/Mac/ClassMaterial/ARCH299/Genome/cbe_genome_mnv/code")
#### READ DATA ####
data_path <- "../../buds-lab-building-data-genome-project-2/data/meters/cleaned/"
meta_path <- "../../buds-lab-building-data-genome-project-2/data/metadata/"
weather_path <- "../../buds-lab-building-data-genome-project-2/data/weather/"
output_path <- "../readfiles/messy/"
df_elec <- read_csv(paste0(data_path, "electricity_cleaned.csv"))
df_meta <- read_csv(paste0(meta_path, "metadata.csv"))
df_weather <- read_csv(paste0(weather_path, "weather.csv"))
# use pacman
require(pacman)
# load libraries
pacman::p_load(tidyverse, lubridate, scales, slider, cowplot, patchwork, RColorBrewer, # general
broom, ggpmisc, ggpubr, # linear models
RMV2.0, # TOWT model
sprtt, effsize) # sequential testing
# turn off scientific notation
options(scipen = 999)
# set default theme for ggplot
theme_set(theme_minimal())
# define base ggplot theme
theme_update(plot.title = element_text(size = 14, colour = "grey20", face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 10, colour = "grey20", face = "italic", hjust = 0.5, margin = margin(b = 10)),
plot.caption = element_text(size = 8, colour = "grey20", face = "italic", hjust = 0.5),
plot.background = element_rect(fill = "white", colour = NA),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
strip.text = element_text(size = 10, color = "grey20", face = "bold"),
strip.background = element_blank())
# T test
perform_t_test <- function(df_pre, df_post, building) {
t.test(df_pre[[building]], df_post[[building]], alternative = "two.sided")
}
#### READ DATA ####
data_path <- "../../buds-lab-building-data-genome-project-2/data/meters/cleaned/"
meta_path <- "../../buds-lab-building-data-genome-project-2/data/metadata/"
weather_path <- "../../buds-lab-building-data-genome-project-2/data/weather/"
output_path <- "../readfiles/tidy/"
df_elec <- read_csv(paste0(data_path, "electricity_cleaned.csv"))
df_meta <- read_csv(paste0(meta_path, "metadata.csv"))
df_weather <- read_csv(paste0(weather_path, "weather.csv"))
# use pacman
require(pacman)
# load libraries
pacman::p_load(tidyverse, lubridate, scales, slider, cowplot, patchwork, RColorBrewer, # general
broom, ggpmisc, ggpubr, # linear models
sprtt, effsize) # sequential testing
# turn off scientific notation
options(scipen = 999)
# set default theme for ggplot
theme_set(theme_minimal())
# define base ggplot theme
theme_update(plot.title = element_text(size = 14, color = "grey20", face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 10, color = "grey20", face = "italic", hjust = 0.5, margin = margin(b = 10)),
plot.caption = element_text(size = 8, color = "grey20", face = "italic", hjust = 0.5),
plot.background = element_rect(fill = "white", color = NA),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
strip.text = element_text(size = 10, color = "grey20", face = "bold"),
strip.background = element_blank())
# define strategy colors
ls_colors <- c("Baseline" = "#99d8c9",
"Measured baseline" = "#99d8c9",
"Adjusted baseline" = "#99d8c9",
"Projected baseline\n(no change)" = "#1b9e77",
"Intervention" = "#fdbb84",
"Measured interv" = "#fdbb84",
"True savings" = "black",
"True normalized savings" = "black")
# load functions
function_path <- "../functions/"
source(paste0(function_path, "blocking.R"))
source(paste0(function_path, "model_fit.R"))
source(paste0(function_path, "blocking.R"))
source(paste0(function_path, "model_fit.R"))
# load functions
function_path <- "../functions/"
source(paste0(function_path, "blocking.R"))
source(paste0(function_path, "model_fit.R"))
source(paste0(function_path, "model_pred.R"))
# load functions
function_path <- "../functions/"
source(paste0(function_path, "blocking.R"))
source(paste0(function_path, "model_fit.R"))
source(paste0(function_path, "model_pred.R"))
source(paste0(function_path, "saving_norm.R"))
# load functions
function_path <- "../functions/"
source(paste0(function_path, "blocking.R"))
source(paste0(function_path, "model_fit.R"))
source(paste0(function_path, "model_pred.R"))
source(paste0(function_path, "saving_norm.R"))
source(paste0(function_path, "ol_est.R"))
source(paste0(function_path, "seq_run.R"))
# load functions
function_path <- "../functions/"
source(paste0(function_path, "blocking.R"))
source(paste0(function_path, "model_fit.R"))
source(paste0(function_path, "model_pred.R"))
source(paste0(function_path, "saving_norm.R"))
source(paste0(function_path, "ol_est.R"))
source(paste0(function_path, "seq_run.R"))
source(paste0(function_path, "seq_plot.R"))
source(paste0(function_path, "err_plot.R"))
source(paste0(function_path, "prepost_plot.R"))
source(paste0(function_path, "cont_plot.R"))
# use pacman
require(pacman)
# load libraries
pacman::p_load(tidyverse, lubridate, scales, slider, cowplot, patchwork, RColorBrewer, # general
broom, ggpmisc, ggpubr) # plotting
# turn off scientific notation
options(scipen = 999)
# set default theme for ggplot
theme_set(theme_minimal())
# define base ggplot theme
theme_update(plot.title = element_text(size = 14, color = "grey20", face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 10, color = "grey20", face = "italic", hjust = 0.5, margin = margin(b = 10)),
plot.caption = element_text(size = 8, color = "grey20", face = "italic", hjust = 0.5),
plot.background = element_rect(fill = "white", color = NA),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
strip.text = element_text(size = 10, color = "grey20", face = "bold"),
strip.background = element_blank())
# define strategy colors
ls_colors <- c("Baseline" = "#99d8c9",
"Measured baseline" = "#99d8c9",
"Adjusted baseline" = "#99d8c9",
"Projected baseline\n(no change)" = "#1b9e77",
"Intervention" = "#fdbb84",
"Measured interv" = "#fdbb84",
"True savings" = "black",
"True normalized savings" = "black")
# define parameters
run_params <- list(type = "messy",
site = T)
sprt_param <- list(baseline = "Baseline",
strategy = "Intervention",
parameter = "power_ave",
label = "power",
n_weeks = 48)
block_params <- list(start_date = "2016-01-01",
n_weeks = 108,
n_seasons = 9,
block_unit = 12)
#### READ DATA ####
readfile_path <- str_glue("../readfiles/{run_params$type}/")
summaryfigs_path <- str_glue("../figs/{run_params$type}/site_summary/")
combifigs_path <- str_glue("../figs/{run_params$type}/comb_analysis/")
df_energy <- read_rds(paste0(readfile_path, "df_energy.rds"))
df_meta <- read_rds(paste0(readfile_path, "df_meta.rds"))
df_weather <- read_rds(paste0(readfile_path, "df_weather.rds"))
df_sprt_all <- read_rds(paste0(readfile_path, "df_sprt_all.rds"))
df_seq_FS <- read_rds(paste0(readfile_path, "df_seq_FS.rds"))
df_MD <- read_rds(paste0(readfile_path, "df_MD.rds"))
df_FS <- read_rds(paste0(readfile_path, "df_FS.rds"))
df_eui <- read_rds(paste0(readfile_path, "df_eui.rds"))
df_cont_MD <- read_rds(paste0(readfile_path, "df_cont_MD.rds"))
df_cont_FS <- read_rds(paste0(readfile_path, "df_cont_FS.rds"))
df_FS_nsprt <- read_rds(paste0(readfile_path, "df_FS_nsprt.rds"))
df_MD_nsprt <- read_rds(paste0(readfile_path, "df_MD_nsprt.rds"))
df_seq_FS_nsprt <- read_rds(paste0(readfile_path, "df_seq_FS_nsprt.rds"))
#### READ DATA ####
readfile_path <- str_glue("../readfiles/{run_params$type}/")
summaryfigs_path <- str_glue("../figs/{run_params$type}/site_summary/")
combifigs_path <- str_glue("../figs/{run_params$type}/comb_analysis/")
df_energy <- read_rds(paste0(readfile_path, "df_energy.rds"))
df_meta <- read_rds(paste0(readfile_path, "df_meta.rds"))
df_weather <- read_rds(paste0(readfile_path, "df_weather.rds"))
df_sprt_all <- read_rds(paste0(readfile_path, "df_sprt_all.rds"))
df_seq_FS <- read_rds(paste0(readfile_path, "df_seq_FS.rds"))
setwd("~/Documents/Mac/ClassMaterial/ARCH299/Genome/cbe_genome_mnv/code")
